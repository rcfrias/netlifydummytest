{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amazon-cognito-auth.min.js","webpack:///webpack/bootstrap ea1847fb83fe9decf52f","webpack:///./enhance.js","webpack:///./src/CognitoAccessToken.js","webpack:///./src/CognitoIdToken.js","webpack:///./src/CognitoRefreshToken.js","webpack:///./src/CognitoTokenScopes.js","webpack:///./src/CognitoAuthSession.js","webpack:///./src/StorageHelper.js","webpack:///external {\"root\":[\"AWSCognito\"],\"commonjs2\":\"aws-sdk/global\",\"commonjs\":\"aws-sdk/global\",\"amd\":\"aws-sdk/global\"}","webpack:///./src/CognitoAuth.js","webpack:///./src/DateHelper.js","webpack:///./src/index.js","webpack:///external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_11__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_interopRequireDefault","_src","keys","forEach","defineProperty","enumerable","get","_cognitoidentityserviceprovider","_cognitoidentityserviceprovider2","enhancements","window","crypto","msCrypto","_classCallCheck","instance","Constructor","TypeError","_global","CognitoAccessToken","AccessToken","jwtToken","getJwtToken","setJwtToken","accessToken","getExpiration","payload","split","expiration","JSON","parse","util","base64","decode","toString","exp","getUsername","usernameSource","username","CognitoIdToken","IdToken","idToken","CognitoRefreshToken","RefreshToken","refreshToken","getToken","setToken","CognitoTokenScopes","TokenScopesArray","tokenScopes","getScopes","setTokenScopes","_CognitoTokenScopes","_CognitoTokenScopes2","_CognitoAccessToken","_CognitoAccessToken2","_CognitoIdToken","_CognitoIdToken2","_CognitoRefreshToken","_CognitoRefreshToken2","CognitoAuthSession","_ref","arguments","length","undefined","TokenScopes","getIdToken","setIdToken","getRefreshToken","setRefreshToken","getAccessToken","setAccessToken","getTokenScopes","isValid","now","Math","floor","Date","e","dataMemory","MemoryStorage","setItem","value","getItem","removeItem","clear","StorageHelper","storageWindow","localStorage","exception","getStorage","_typeof","Symbol","iterator","constructor","_CognitoAuthSession","_CognitoAuthSession2","_StorageHelper","_StorageHelper2","CognitoAuth","data","ClientId","AppWebDomain","RedirectUriSignIn","RedirectUriSignOut","Error","getCognitoConstants","PARAMETERERROR","clientId","appWebDomain","Array","isArray","SCOPETYPEERROR","signInUserSession","responseType","TOKEN","storage","getLastUser","CognitoConstants","DOMAIN_SCHEME","DOMAIN_PATH_SIGNIN","DOMAIN_PATH_SIGNOUT","DOMAIN_QUERY_PARAM_REDIRECT_URI","DOMAIN_QUERY_PARAM_SIGNOUT_URI","DOMAIN_QUERY_PARAM_RESPONSE_TYPE","CLIENT_ID","STATE","SCOPE","CODE","POST","QUESTIONMARK","POUNDSIGN","COLONDOUBLESLASH","SLASH","AMPERSAND","EQUALSIGN","SPACE","CONTENTTYPE","CONTENTTYPEVALUE","AUTHORIZATIONCODE","IDTOKEN","ACCESSTOKEN","REFRESHTOKEN","ERROR","STRINGTYPE","STATELENGTH","STATEORIGINSTRING","WITHCREDENTIALS","UNDEFINED","SELF","HOSTNAMEREGEX","QUERYPARAMETERREGEX1","QUERYPARAMETERREGEX2","HEADER","Content-Type","getClientId","getAppWebDomain","getCurrentUser","lastUserKey","lastAuthUser","setUser","Username","useCodeGrantFlow","useImplicitFlow","getSignInUserSession","setUsername","getSession","tokenScopesInputSet","Set","cachedScopesSet","URL","getFQDNSignIn","userhandler","onSuccess","getCachedSession","compareSets","refreshSession","launchUri","parseCognitoWebResponse","httpRequestResponse","indexOf","getCodeQueryParameter","getTokenQueryParameter","mapSecond","Map","getQueryParameters","has","codeParameter","getCodeParameter","url","concat","header","body","grant_type","client_id","redirect_uri","code","boundOnSuccess","onSuccessExchangeForToken","bind","boundOnFailure","onFailure","makePOSTRequest","map","cacheTokensScopes","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","scopeKey","scopesString","scopesArray","sessionData","cachedSession","lastUserName","tokenUserName","join","set1","set2","size","_iterator","_isArray","_i","_ref2","next","done","item","getHostName","match","str","String","url2","str1","num","i","set","urlEdit","url1","urlStr","generateRandomString","chars","result","round","random","clearCachedTokensScopes","refresh_token","onSuccessRefreshToken","xhr","createCORSRequest","bodyString","j","jsonData","responseText","setRequestHeader","substring","send","onreadystatechange","readyState","status","onload","onerror","method","XMLHttpRequest","open","XDomainRequest","err","jsonDataObject","id_token","access_token","getSpaceSeperatedScopeString","tokenScopesString","encodeURIComponent","state","uri","signOut","getFQDNSignOut","monthNames","weekNames","DateHelper","getNowString","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","dateNow","_CognitoAuth","_DateHelper"],"mappings":"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","file":"amazon-cognito-auth.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"aws-sdk/global\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"aws-sdk/global\", \"aws-sdk/clients/cognitoidentityserviceprovider\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"aws-sdk/global\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"AWSCognito\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * Copyright 2017 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n * \n *      http://aws.amazon.com/apache2.0/\n * \n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License. \n */\n\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"aws-sdk/global\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"aws-sdk/global\", \"aws-sdk/clients/cognitoidentityserviceprovider\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"aws-sdk/global\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"AWSCognito\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _src = __webpack_require__(10);\n\t\n\tObject.keys(_src).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _src[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(11);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar enhancements = _interopRequireWildcard(_src);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tObject.keys(enhancements).forEach(function (key) {\n\t  _cognitoidentityserviceprovider2.default[key] = enhancements[key];\n\t});\n\t\n\t// The version of crypto-browserify included by aws-sdk only\n\t// checks for window.crypto, not window.msCrypto as used by\n\t// IE 11 – so we set it explicitly here\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\t\n\tif (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n\t  window.crypto = window.msCrypto;\n\t}\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _global = __webpack_require__(7);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*!\n\t                                                                                                                                                           * Amazon Cognito Auth SDK for JavaScript\n\t                                                                                                                                                           * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t                                                                                                                                                          \n\t                                                                                                                                                           * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t                                                                                                                                                           * You may not use this file except in compliance with the License.\n\t                                                                                                                                                           * A copy of the License is located at\n\t                                                                                                                                                           *\n\t                                                                                                                                                           *         http://aws.amazon.com/apache2.0/\n\t                                                                                                                                                           *\n\t                                                                                                                                                           * or in the \"license\" file accompanying this file.\n\t                                                                                                                                                           * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t                                                                                                                                                           * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t                                                                                                                                                           * License for the specific language governing permissions\n\t                                                                                                                                                           * and limitations under the License.\n\t                                                                                                                                                           */\n\t\n\t/** @class */\n\tvar CognitoAccessToken = function () {\n\t  /**\n\t   * Constructs a new CognitoAccessToken object\n\t   * @param {string=} AccessToken The JWT access token.\n\t   */\n\t  function CognitoAccessToken(AccessToken) {\n\t    _classCallCheck(this, CognitoAccessToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = AccessToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  CognitoAccessToken.prototype.getJwtToken = function getJwtToken() {\n\t    return this.jwtToken;\n\t  };\n\t\n\t  /**\n\t   * Sets new value for access token.\n\t   * @param {string=} accessToken The JWT access token.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAccessToken.prototype.setJwtToken = function setJwtToken(accessToken) {\n\t    this.jwtToken = accessToken;\n\t  };\n\t\n\t  /**\n\t   * @returns {int} the token's expiration (exp member).\n\t   */\n\t\n\t\n\t  CognitoAccessToken.prototype.getExpiration = function getExpiration() {\n\t    var payload = this.jwtToken.split('.')[1];\n\t    var expiration = JSON.parse(_global.util.base64.decode(payload).toString('utf8'));\n\t    return expiration.exp;\n\t  };\n\t\n\t  /**\n\t   * @returns {string} the username from payload.\n\t   */\n\t\n\t\n\t  CognitoAccessToken.prototype.getUsername = function getUsername() {\n\t    if (this.jwtToken === null) {\n\t      return undefined;\n\t    }\n\t    var payload = this.jwtToken.split('.')[1];\n\t    var usernameSource = JSON.parse(_global.util.base64.decode(payload).toString('utf8'));\n\t    return usernameSource.username;\n\t  };\n\t\n\t  return CognitoAccessToken;\n\t}();\n\t\n\texports.default = CognitoAccessToken;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _global = __webpack_require__(7);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*!\n\t                                                                                                                                                           * Amazon Cognito Auth SDK for JavaScript\n\t                                                                                                                                                           * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t                                                                                                                                                          \n\t                                                                                                                                                           * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t                                                                                                                                                           * You may not use this file except in compliance with the License.\n\t                                                                                                                                                           * A copy of the License is located at\n\t                                                                                                                                                           *\n\t                                                                                                                                                           *         http://aws.amazon.com/apache2.0/\n\t                                                                                                                                                           *\n\t                                                                                                                                                           * or in the \"license\" file accompanying this file.\n\t                                                                                                                                                           * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t                                                                                                                                                           * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t                                                                                                                                                           * License for the specific language governing permissions\n\t                                                                                                                                                           * and limitations under the License.\n\t                                                                                                                                                           */\n\t\n\t/** @class */\n\tvar CognitoIdToken = function () {\n\t  /**\n\t   * Constructs a new CognitoIdToken object\n\t   * @param {string=} IdToken The JWT Id token\n\t   */\n\t  function CognitoIdToken(IdToken) {\n\t    _classCallCheck(this, CognitoIdToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = IdToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  CognitoIdToken.prototype.getJwtToken = function getJwtToken() {\n\t    return this.jwtToken;\n\t  };\n\t\n\t  /**\n\t   * Sets new value for id token.\n\t   * @param {string=} idToken The JWT Id token\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoIdToken.prototype.setJwtToken = function setJwtToken(idToken) {\n\t    this.jwtToken = idToken;\n\t  };\n\t\n\t  /**\n\t   * @returns {int} the token's expiration (exp member).\n\t   */\n\t\n\t\n\t  CognitoIdToken.prototype.getExpiration = function getExpiration() {\n\t    var payload = this.jwtToken.split('.')[1];\n\t    var expiration = JSON.parse(_global.util.base64.decode(payload).toString('utf8'));\n\t    return expiration.exp;\n\t  };\n\t\n\t  return CognitoIdToken;\n\t}();\n\t\n\texports.default = CognitoIdToken;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoRefreshToken = function () {\n\t  /**\n\t   * Constructs a new CognitoRefreshToken object\n\t   * @param {string=} RefreshToken The JWT refresh token.\n\t   */\n\t  function CognitoRefreshToken(RefreshToken) {\n\t    _classCallCheck(this, CognitoRefreshToken);\n\t\n\t    // Assign object\n\t    this.refreshToken = RefreshToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  CognitoRefreshToken.prototype.getToken = function getToken() {\n\t    return this.refreshToken;\n\t  };\n\t\n\t  /**\n\t   * Sets new value for refresh token.\n\t   * @param {string=} refreshToken The JWT refresh token.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoRefreshToken.prototype.setToken = function setToken(refreshToken) {\n\t    this.refreshToken = refreshToken;\n\t  };\n\t\n\t  return CognitoRefreshToken;\n\t}();\n\t\n\texports.default = CognitoRefreshToken;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoTokenScopes = function () {\n\t  /**\n\t   * Constructs a new CognitoTokenScopes object\n\t   * @param {array=} TokenScopesArray The token scopes\n\t   */\n\t  function CognitoTokenScopes(TokenScopesArray) {\n\t    _classCallCheck(this, CognitoTokenScopes);\n\t\n\t    // Assign object\n\t    this.tokenScopes = TokenScopesArray || [];\n\t  }\n\t\n\t  /**\n\t   * @returns {Array} the token scopes.\n\t   */\n\t\n\t\n\t  CognitoTokenScopes.prototype.getScopes = function getScopes() {\n\t    return this.tokenScopes;\n\t  };\n\t\n\t  /**\n\t   * Sets new value for token scopes.\n\t   * @param {array=} tokenScopes The token scopes\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoTokenScopes.prototype.setTokenScopes = function setTokenScopes(tokenScopes) {\n\t    this.tokenScopes = tokenScopes;\n\t  };\n\t\n\t  return CognitoTokenScopes;\n\t}();\n\t\n\texports.default = CognitoTokenScopes;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _CognitoTokenScopes = __webpack_require__(4);\n\t\n\tvar _CognitoTokenScopes2 = _interopRequireDefault(_CognitoTokenScopes);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(1);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(2);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(3);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*!\n\t                                                                                                                                                           * Amazon Cognito Auth SDK for JavaScript\n\t                                                                                                                                                           * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t                                                                                                                                                          \n\t                                                                                                                                                           * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t                                                                                                                                                           * You may not use this file except in compliance with the License.\n\t                                                                                                                                                           * A copy of the License is located at\n\t                                                                                                                                                           *\n\t                                                                                                                                                           *         http://aws.amazon.com/apache2.0/\n\t                                                                                                                                                           *\n\t                                                                                                                                                           * or in the \"license\" file accompanying this file.\n\t                                                                                                                                                           * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t                                                                                                                                                           * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t                                                                                                                                                           * License for the specific language governing permissions\n\t                                                                                                                                                           * and limitations under the License.\n\t                                                                                                                                                           */\n\t\n\t/** @class */\n\tvar CognitoAuthSession = function () {\n\t  /**\n\t   * Constructs a new CognitoUserSession object\n\t   * @param {CognitoIdToken} IdToken The session's Id token.\n\t   * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n\t   * @param {CognitoAccessToken} AccessToken The session's access token.\n\t   * @param {array}  TokenScopes  The session's token scopes.\n\t   */\n\t  function CognitoAuthSession() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken,\n\t        RefreshToken = _ref.RefreshToken,\n\t        AccessToken = _ref.AccessToken,\n\t        TokenScopes = _ref.TokenScopes;\n\t\n\t    _classCallCheck(this, CognitoAuthSession);\n\t\n\t    if (IdToken) {\n\t      this.idToken = IdToken;\n\t    } else {\n\t      this.idToken = new _CognitoIdToken2.default();\n\t    }\n\t    if (RefreshToken) {\n\t      this.refreshToken = RefreshToken;\n\t    } else {\n\t      this.refreshToken = new _CognitoRefreshToken2.default();\n\t    }\n\t    if (AccessToken) {\n\t      this.accessToken = AccessToken;\n\t    } else {\n\t      this.accessToken = new _CognitoAccessToken2.default();\n\t    }\n\t    if (TokenScopes) {\n\t      this.tokenScopes = TokenScopes;\n\t    } else {\n\t      this.tokenScopes = new _CognitoTokenScopes2.default();\n\t    }\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoIdToken} the session's Id token\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.getIdToken = function getIdToken() {\n\t    return this.idToken;\n\t  };\n\t\n\t  /**\n\t   * Set a new Id token\n\t   * @param {CognitoIdToken} IdToken The session's Id token.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.setIdToken = function setIdToken(IdToken) {\n\t    this.idToken = IdToken;\n\t  };\n\t\n\t  /**\n\t   * @returns {CognitoRefreshToken} the session's refresh token\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.getRefreshToken = function getRefreshToken() {\n\t    return this.refreshToken;\n\t  };\n\t\n\t  /**\n\t   * Set a new Refresh token\n\t   * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.setRefreshToken = function setRefreshToken(RefreshToken) {\n\t    this.refreshToken = RefreshToken;\n\t  };\n\t\n\t  /**\n\t   * @returns {CognitoAccessToken} the session's access token\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.getAccessToken = function getAccessToken() {\n\t    return this.accessToken;\n\t  };\n\t\n\t  /**\n\t   * Set a new Access token\n\t   * @param {CognitoAccessToken} AccessToken The session's access token.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.setAccessToken = function setAccessToken(AccessToken) {\n\t    this.accessToken = AccessToken;\n\t  };\n\t\n\t  /**\n\t   * @returns {CognitoTokenScopes} the session's token scopes\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.getTokenScopes = function getTokenScopes() {\n\t    return this.tokenScopes;\n\t  };\n\t\n\t  /**\n\t   * Set new token scopes\n\t   * @param {array}  tokenScopes  The session's token scopes.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.setTokenScopes = function setTokenScopes(tokenScopes) {\n\t    this.tokenScopes = tokenScopes;\n\t  };\n\t\n\t  /**\n\t   * Checks to see if the session is still valid based on session expiry information found\n\t   * in Access and Id Tokens and the current time\n\t   * @returns {boolean} if the session is still valid\n\t   */\n\t\n\t\n\t  CognitoAuthSession.prototype.isValid = function isValid() {\n\t    var now = Math.floor(new Date() / 1000);\n\t    try {\n\t      if (this.accessToken != null) {\n\t        return now < this.accessToken.getExpiration();\n\t      }\n\t      if (this.idToken != null) {\n\t        return now < this.idToken.getExpiration();\n\t      }\n\t      return false;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  };\n\t\n\t  return CognitoAuthSession;\n\t}();\n\t\n\texports.default = CognitoAuthSession;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\tvar dataMemory = {};\n\t\n\t/** @class */\n\t\n\tvar MemoryStorage = function () {\n\t  function MemoryStorage() {\n\t    _classCallCheck(this, MemoryStorage);\n\t  }\n\t\n\t  /**\n\t   * This is used to set a specific item in storage\n\t   * @param {string} key - the key for the item\n\t   * @param {object} value - the value\n\t   * @returns {string} value that was set\n\t   */\n\t  MemoryStorage.setItem = function setItem(key, value) {\n\t    dataMemory[key] = value;\n\t    return dataMemory[key];\n\t  };\n\t\n\t  /**\n\t   * This is used to get a specific key from storage\n\t   * @param {string} key - the key for the item\n\t   * This is used to clear the storage\n\t   * @returns {string} the data item\n\t   */\n\t\n\t\n\t  MemoryStorage.getItem = function getItem(key) {\n\t    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n\t  };\n\t\n\t  /**\n\t   * This is used to remove an item from storage\n\t   * @param {string} key - the key being set\n\t   * @returns {string} value - value that was deleted\n\t   */\n\t\n\t\n\t  MemoryStorage.removeItem = function removeItem(key) {\n\t    return delete dataMemory[key];\n\t  };\n\t\n\t  /**\n\t   * This is used to clear the storage\n\t   * @returns {string} nothing\n\t   */\n\t\n\t\n\t  MemoryStorage.clear = function clear() {\n\t    dataMemory = {};\n\t    return dataMemory;\n\t  };\n\t\n\t  return MemoryStorage;\n\t}();\n\t\n\t/** @class */\n\t\n\t\n\tvar StorageHelper = function () {\n\t\n\t  /**\n\t   * This is used to get a storage object\n\t   * @returns {object} the storage\n\t   */\n\t  function StorageHelper() {\n\t    _classCallCheck(this, StorageHelper);\n\t\n\t    try {\n\t      this.storageWindow = window.localStorage;\n\t      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n\t      this.storageWindow.removeItem('aws.cognito.test-ls');\n\t    } catch (exception) {\n\t      this.storageWindow = MemoryStorage;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * This is used to return the storage\n\t   * @returns {object} the storage\n\t   */\n\t\n\t\n\t  StorageHelper.prototype.getStorage = function getStorage() {\n\t    return this.storageWindow;\n\t  };\n\t\n\t  return StorageHelper;\n\t}();\n\t\n\texports.default = StorageHelper;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _CognitoTokenScopes = __webpack_require__(4);\n\t\n\tvar _CognitoTokenScopes2 = _interopRequireDefault(_CognitoTokenScopes);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(1);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(2);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(3);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tvar _CognitoAuthSession = __webpack_require__(5);\n\t\n\tvar _CognitoAuthSession2 = _interopRequireDefault(_CognitoAuthSession);\n\t\n\tvar _StorageHelper = __webpack_require__(6);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /*!\n\t                                                                                                                                                           * Amazon Cognito Auth SDK for JavaScript\n\t                                                                                                                                                           * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t                                                                                                                                                          \n\t                                                                                                                                                           * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t                                                                                                                                                           * You may not use this file except in compliance with the License.\n\t                                                                                                                                                           * A copy of the License is located at\n\t                                                                                                                                                           *\n\t                                                                                                                                                           *         http://aws.amazon.com/apache2.0/\n\t                                                                                                                                                           *\n\t                                                                                                                                                           * or in the \"license\" file accompanying this file.\n\t                                                                                                                                                           * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t                                                                                                                                                           * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t                                                                                                                                                           * License for the specific language governing permissions\n\t                                                                                                                                                           * and limitations under the License.\n\t                                                                                                                                                           */\n\t\n\t/** @class */\n\tvar CognitoAuth = function () {\n\t  /**\n\t   * Constructs a new CognitoAuth object\n\t   * @param {object} data Creation options\n\t   * @param {string} data.ClientId Required: User pool application client id.\n\t   * @param {string} data.AppWebDomain Required: The application/user-pools Cognito web hostname,\n\t   *                     this is set at the Cognito console.\n\t   * @param {array} data.TokenScopesArray Optional: The token scopes\n\t   * @param {string} data.RedirectUriSignIn Required: The redirect Uri,\n\t   * which will be launched after authentication as signed in.\n\t   * @param {string} data.RedirectUriSignOut Required:\n\t   * The redirect Uri, which will be launched when signed out.\n\t   * @param {nodeCallback<CognitoAuthSession>} Optional: userhandler Called on success or error.\n\t   */\n\t  function CognitoAuth(data) {\n\t    _classCallCheck(this, CognitoAuth);\n\t\n\t    var _ref = data || {},\n\t        ClientId = _ref.ClientId,\n\t        AppWebDomain = _ref.AppWebDomain,\n\t        TokenScopesArray = _ref.TokenScopesArray,\n\t        RedirectUriSignIn = _ref.RedirectUriSignIn,\n\t        RedirectUriSignOut = _ref.RedirectUriSignOut;\n\t\n\t    if (data == null || !ClientId || !AppWebDomain || !RedirectUriSignIn || !RedirectUriSignOut) {\n\t      throw new Error(this.getCognitoConstants().PARAMETERERROR);\n\t    }\n\t\n\t    this.clientId = ClientId;\n\t    this.appWebDomain = AppWebDomain;\n\t    if (!Array.isArray(TokenScopesArray)) {\n\t      throw new Error(this.getCognitoConstants().SCOPETYPEERROR);\n\t    }\n\t    this.TokenScopesArray = TokenScopesArray || [];\n\t    var tokenScopes = new _CognitoTokenScopes2.default(this.TokenScopesArray);\n\t    this.RedirectUriSignIn = RedirectUriSignIn;\n\t    this.RedirectUriSignOut = RedirectUriSignOut;\n\t    this.signInUserSession = new _CognitoAuthSession2.default();\n\t    this.responseType = this.getCognitoConstants().TOKEN;\n\t    this.storage = new _StorageHelper2.default().getStorage();\n\t    this.signInUserSession.setTokenScopes(tokenScopes);\n\t    this.username = this.getLastUser();\n\t  }\n\t\n\t  /**\n\t   * @returns {JSON} the constants\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getCognitoConstants = function getCognitoConstants() {\n\t    var CognitoConstants = {\n\t      DOMAIN_SCHEME: 'https',\n\t      DOMAIN_PATH_SIGNIN: 'authorize',\n\t      DOMAIN_PATH_SIGNOUT: 'logout',\n\t      DOMAIN_QUERY_PARAM_REDIRECT_URI: 'redirect_uri',\n\t      DOMAIN_QUERY_PARAM_SIGNOUT_URI: 'logout_uri',\n\t      DOMAIN_QUERY_PARAM_RESPONSE_TYPE: 'response_type',\n\t      CLIENT_ID: 'client_id',\n\t      STATE: 'state',\n\t      SCOPE: 'scope',\n\t      TOKEN: 'token',\n\t      CODE: 'code',\n\t      POST: 'POST',\n\t      PARAMETERERROR: 'The parameters: App client Id, App web domain' + 'and the rediect URL when you are signed in are required.',\n\t      SCOPETYPEERROR: 'Scopes have to be array type. ',\n\t      QUESTIONMARK: '?',\n\t      POUNDSIGN: '#',\n\t      COLONDOUBLESLASH: '://',\n\t      SLASH: '/',\n\t      AMPERSAND: '&',\n\t      EQUALSIGN: '=',\n\t      SPACE: ' ',\n\t      CONTENTTYPE: 'Content-Type',\n\t      CONTENTTYPEVALUE: 'application/x-www-form-urlencoded',\n\t      AUTHORIZATIONCODE: 'authorization_code',\n\t      IDTOKEN: 'id_token',\n\t      ACCESSTOKEN: 'access_token',\n\t      REFRESHTOKEN: 'refresh_token',\n\t      ERROR: 'error',\n\t      STRINGTYPE: 'string',\n\t      STATELENGTH: 32,\n\t      STATEORIGINSTRING: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\t      WITHCREDENTIALS: 'withCredentials',\n\t      UNDEFINED: 'undefined',\n\t      SELF: '_self',\n\t      HOSTNAMEREGEX: /:\\/\\/([0-9]?\\.)?(.[^/:]+)/i,\n\t      QUERYPARAMETERREGEX1: /#(.+)/,\n\t      QUERYPARAMETERREGEX2: /=(.+)/,\n\t      HEADER: { 'Content-Type': 'application/x-www-form-urlencoded' }\n\t    };\n\t    return CognitoConstants;\n\t  };\n\t\n\t  /**\n\t   * @returns {string} the client id\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getClientId = function getClientId() {\n\t    return this.clientId;\n\t  };\n\t\n\t  /**\n\t   * @returns {string} the app web domain\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getAppWebDomain = function getAppWebDomain() {\n\t    return this.appWebDomain;\n\t  };\n\t\n\t  /**\n\t   * method for getting the current user of the application from the local storage\n\t   *\n\t   * @returns {CognitoAuth} the user retrieved from storage\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getCurrentUser = function getCurrentUser() {\n\t    var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\t\n\t    var lastAuthUser = this.storage.getItem(lastUserKey);\n\t    return lastAuthUser;\n\t  };\n\t\n\t  /**\n\t   * @param {string} Username the user's name\n\t   * method for setting the current user's name\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.setUser = function setUser(Username) {\n\t    this.username = Username;\n\t  };\n\t\n\t  /**\n\t   * sets response type to 'code'\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.useCodeGrantFlow = function useCodeGrantFlow() {\n\t    this.responseType = this.getCognitoConstants().CODE;\n\t  };\n\t\n\t  /**\n\t   * sets response type to 'token'\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.useImplicitFlow = function useImplicitFlow() {\n\t    this.responseType = this.getCognitoConstants().TOKEN;\n\t  };\n\t\n\t  /**\n\t   * @returns {CognitoAuthSession} the current session for this user\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getSignInUserSession = function getSignInUserSession() {\n\t    return this.signInUserSession;\n\t  };\n\t\n\t  /**\n\t   * @returns {string} the user's username\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getUsername = function getUsername() {\n\t    return this.username;\n\t  };\n\t\n\t  /**\n\t   * @param {string} Username the user's username\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.setUsername = function setUsername(Username) {\n\t    this.username = Username;\n\t  };\n\t\n\t  /**\n\t   * This is used to get a session, either from the session object\n\t   * or from the local storage, or by using a refresh token\n\t   * @param {string} RedirectUriSignIn Required: The redirect Uri,\n\t   * which will be launched after authentication.\n\t   * @param {array} TokenScopesArray Required: The token scopes, it is an\n\t   * array of strings specifying all scopes for the tokens.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getSession = function getSession() {\n\t    var tokenScopesInputSet = new Set(this.TokenScopesArray);\n\t    var cachedScopesSet = new Set(this.signInUserSession.tokenScopes.getScopes());\n\t    var URL = this.getFQDNSignIn();\n\t    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t      return this.userhandler.onSuccess(this.signInUserSession);\n\t    }\n\t    this.signInUserSession = this.getCachedSession();\n\t    // compare scopes\n\t    if (!this.compareSets(tokenScopesInputSet, cachedScopesSet)) {\n\t      var tokenScopes = new _CognitoTokenScopes2.default(this.TokenScopesArray);\n\t      var idToken = new _CognitoIdToken2.default();\n\t      var accessToken = new _CognitoAccessToken2.default();\n\t      var refreshToken = new _CognitoRefreshToken2.default();\n\t      this.signInUserSession.setTokenScopes(tokenScopes);\n\t      this.signInUserSession.setIdToken(idToken);\n\t      this.signInUserSession.setAccessToken(accessToken);\n\t      this.signInUserSession.setRefreshToken(refreshToken);\n\t      this.launchUri(URL);\n\t    } else if (this.signInUserSession.isValid()) {\n\t      return this.userhandler.onSuccess(this.signInUserSession);\n\t    } else if (!this.signInUserSession.getRefreshToken() || !this.signInUserSession.getRefreshToken().getToken()) {\n\t      this.launchUri(URL);\n\t    } else {\n\t      this.refreshSession(this.signInUserSession.getRefreshToken().getToken());\n\t    }\n\t    return undefined;\n\t  };\n\t\n\t  /**\n\t   * @param {string} httpRequestResponse the http request response\n\t   * @returns {void}\n\t   * Parse the http request response and proceed according to different response types.\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.parseCognitoWebResponse = function parseCognitoWebResponse(httpRequestResponse) {\n\t    if (httpRequestResponse.indexOf(this.getCognitoConstants().QUESTIONMARK) > -1) {\n\t      this.getCodeQueryParameter(httpRequestResponse);\n\t    } else if (httpRequestResponse.indexOf(this.getCognitoConstants().POUNDSIGN) > -1) {\n\t      // To parse the response to get tokens\n\t      this.getTokenQueryParameter(httpRequestResponse);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * @param {string} httpRequestResponse the http request response\n\t   * @returns {void}\n\t   * Parse the http request response and proceed according to code response type.\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getCodeQueryParameter = function getCodeQueryParameter(httpRequestResponse) {\n\t    var mapSecond = new Map();\n\t    mapSecond = this.getQueryParameters(httpRequestResponse, mapSecond);\n\t    if (mapSecond.has(this.getCognitoConstants().CODE)) {\n\t      // if the response contains code\n\t      // To parse the response and get the code value.\n\t      var codeParameter = this.getCodeParameter(httpRequestResponse);\n\t      var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().TOKEN);\n\t      var header = this.getCognitoConstants().HEADER;\n\t      var body = { grant_type: this.getCognitoConstants().AUTHORIZATIONCODE,\n\t        client_id: this.getClientId(),\n\t        redirect_uri: this.RedirectUriSignIn,\n\t        code: codeParameter };\n\t      var boundOnSuccess = this.onSuccessExchangeForToken.bind(this);\n\t      var boundOnFailure = this.onFailure.bind(this);\n\t      this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Parse the http request response and proceed according to token response type.\n\t   * @param {string} httpRequestResponse the http request response\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getTokenQueryParameter = function getTokenQueryParameter(httpRequestResponse) {\n\t    var map = new Map();\n\t    map = this.getQueryParameters(httpRequestResponse, map);\n\t    var idToken = new _CognitoIdToken2.default();\n\t    var accessToken = new _CognitoAccessToken2.default();\n\t    var refreshToken = new _CognitoRefreshToken2.default();\n\t    if (httpRequestResponse.indexOf(this.getCognitoConstants().IDTOKEN) > -1) {\n\t      idToken.setJwtToken(map.get(this.getCognitoConstants().IDTOKEN));\n\t      this.signInUserSession.setIdToken(idToken);\n\t    } else {\n\t      this.signInUserSession.setIdToken(idToken);\n\t    }\n\t    if (httpRequestResponse.indexOf(this.getCognitoConstants().ACCESSTOKEN) > -1) {\n\t      accessToken.setJwtToken(map.get(this.getCognitoConstants().ACCESSTOKEN));\n\t      this.signInUserSession.setAccessToken(accessToken);\n\t    } else {\n\t      this.signInUserSession.setAccessToken(accessToken);\n\t    }\n\t    if (httpRequestResponse.indexOf(this.getCognitoConstants().REFRESHTOKEN) > -1) {\n\t      refreshToken.setToken(map.get(this.getCognitoConstants().REFRESHTOKEN));\n\t      this.signInUserSession.setRefreshToken(refreshToken);\n\t    } else {\n\t      this.signInUserSession.setRefreshToken(refreshToken);\n\t    }\n\t    this.cacheTokensScopes();\n\t    return this.userhandler.onSuccess(this.signInUserSession);\n\t  };\n\t\n\t  /**\n\t   * Get cached tokens and scopes and return a new session using all the cached data.\n\t   * @returns {CognitoAuthSession} the auth session\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getCachedSession = function getCachedSession() {\n\t    if (!this.username) {\n\t      return new _CognitoAuthSession2.default();\n\t    }\n\t    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId() + '.' + this.username;\n\t    var idTokenKey = keyPrefix + '.idToken';\n\t    var accessTokenKey = keyPrefix + '.accessToken';\n\t    var refreshTokenKey = keyPrefix + '.refreshToken';\n\t    var scopeKey = keyPrefix + '.tokenScopesString';\n\t\n\t    var scopesString = this.storage.getItem(scopeKey);\n\t    var scopesArray = [];\n\t    if (scopesString) {\n\t      scopesArray = scopesString.split(' ');\n\t    }\n\t    var tokenScopes = new _CognitoTokenScopes2.default(scopesArray);\n\t    var idToken = new _CognitoIdToken2.default(this.storage.getItem(idTokenKey));\n\t    var accessToken = new _CognitoAccessToken2.default(this.storage.getItem(accessTokenKey));\n\t    var refreshToken = new _CognitoRefreshToken2.default(this.storage.getItem(refreshTokenKey));\n\t\n\t    var sessionData = {\n\t      IdToken: idToken,\n\t      AccessToken: accessToken,\n\t      RefreshToken: refreshToken,\n\t      TokenScopes: tokenScopes\n\t    };\n\t    var cachedSession = new _CognitoAuthSession2.default(sessionData);\n\t    return cachedSession;\n\t  };\n\t\n\t  /**\n\t   * This is used to get last signed in user from local storage\n\t   * @returns {string} the last user name\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getLastUser = function getLastUser() {\n\t    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n\t    var lastUserKey = keyPrefix + '.LastAuthUser';\n\t    var lastUserName = this.storage.getItem(lastUserKey);\n\t    if (lastUserName) {\n\t      return lastUserName;\n\t    }\n\t    return undefined;\n\t  };\n\t\n\t  /**\n\t   * This is used to save the session tokens, scope and state to local storage\n\t   * Input parameter is a set of strings.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.cacheTokensScopes = function cacheTokensScopes() {\n\t    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n\t    var tokenUserName = this.signInUserSession.getAccessToken().getUsername();\n\t    var idTokenKey = keyPrefix + '.' + tokenUserName + '.idToken';\n\t    var accessTokenKey = keyPrefix + '.' + tokenUserName + '.accessToken';\n\t    var refreshTokenKey = keyPrefix + '.' + tokenUserName + '.refreshToken';\n\t    var lastUserKey = keyPrefix + '.LastAuthUser';\n\t    var scopeKey = keyPrefix + '.' + tokenUserName + '.tokenScopesString';\n\t    var scopesArray = this.signInUserSession.getTokenScopes().getScopes();\n\t    var scopesString = scopesArray.join(' ');\n\t    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t    this.storage.setItem(lastUserKey, tokenUserName);\n\t    this.storage.setItem(scopeKey, scopesString);\n\t  };\n\t\n\t  /**\n\t   * Compare two sets if they are identical.\n\t   * @param {set} set1 one set\n\t   * @param {set} set2 the other set\n\t   * @returns {boolean} boolean value is true if two sets are identical\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.compareSets = function compareSets(set1, set2) {\n\t    if (set1.size !== set2.size) {\n\t      return false;\n\t    }\n\t    for (var _iterator = set1, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t      var _ref2;\n\t\n\t      if (_isArray) {\n\t        if (_i >= _iterator.length) break;\n\t        _ref2 = _iterator[_i++];\n\t      } else {\n\t        _i = _iterator.next();\n\t        if (_i.done) break;\n\t        _ref2 = _i.value;\n\t      }\n\t\n\t      var item = _ref2;\n\t\n\t      if (!set2.has(item)) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * @param {string} url the url string\n\t   * Get the hostname from url.\n\t   * @returns {string} hostname string\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getHostName = function getHostName(url) {\n\t    var match = url.match(this.getCognitoConstants().HOSTNAMEREGEX);\n\t    if (match != null && match.length > 2 && _typeof(match[2]) === this.getCognitoConstants().STRINGTYPE && match[2].length > 0) {\n\t      return match[2];\n\t    }\n\t    return undefined;\n\t  };\n\t\n\t  /**\n\t   * Get http query parameters and store them into a map.\n\t   * @param {string} url the url string\n\t   * @param {map} map the query parameter map\n\t   * @returns {map} map\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getQueryParameters = function getQueryParameters(url, map) {\n\t    var str = String(url).split(this.getCognitoConstants().QUERYPARAMETERREGEX1);\n\t    var url2 = str[1];\n\t    var str1 = String(url2).split(this.getCognitoConstants().AMPERSAND);\n\t    var num = str1.length;\n\t    var i = void 0;\n\t    for (i = 0; i < num; i++) {\n\t      str1[i] = String(str1[i]).split(this.getCognitoConstants().QUERYPARAMETERREGEX2);\n\t      map.set(str1[i][0], str1[i][1]);\n\t    }\n\t    return map;\n\t  };\n\t\n\t  /**\n\t   * Get the code parameter from the url.\n\t   * @param {string} url the url string\n\t   * @returns {string} code\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getCodeParameter = function getCodeParameter(url) {\n\t    var urlEdit = String(url).split(this.getCognitoConstants().QUESTIONMARK);\n\t    var url1 = urlEdit[1];\n\t    var urlStr = String(url1).split(this.getCognitoConstants().EQUALSIGN);\n\t    var code = urlStr[1];\n\t    return code;\n\t  };\n\t\n\t  /**\n\t   * helper function to generate a random string\n\t   * @param {int} length the length of string\n\t   * @param {string} chars a original string\n\t   * @returns {string} a random value.\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.generateRandomString = function generateRandomString(length, chars) {\n\t    var result = '';\n\t    var i = length;\n\t    for (; i > 0; --i) {\n\t      result += chars[Math.round(Math.random() * (chars.length - 1))];\n\t    }return result;\n\t  };\n\t\n\t  /**\n\t   * This is used to clear the session tokens, scopes and state from local storage\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.clearCachedTokensScopes = function clearCachedTokensScopes() {\n\t    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n\t    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t    var lastUserKey = keyPrefix + '.LastAuthUser';\n\t    var scopeKey = keyPrefix + '.' + this.username + '.tokenScopesString';\n\t\n\t    this.storage.removeItem(idTokenKey);\n\t    this.storage.removeItem(accessTokenKey);\n\t    this.storage.removeItem(refreshTokenKey);\n\t    this.storage.removeItem(lastUserKey);\n\t    this.storage.removeItem(scopeKey);\n\t  };\n\t\n\t  /**\n\t   * This is used to build a user session from tokens retrieved in the authentication result\n\t   * @param {object} refreshToken authResult Successful auth response from server.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.refreshSession = function refreshSession(refreshToken) {\n\t    // https POST call for refreshing token\n\t    var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().TOKEN);\n\t    var header = this.getCognitoConstants().HEADER;\n\t    var body = { grant_type: this.getCognitoConstants().REFRESHTOKEN,\n\t      client_id: this.getClientId(),\n\t      redirect_uri: this.RedirectUriSignIn,\n\t      refresh_token: refreshToken };\n\t    var boundOnSuccess = this.onSuccessRefreshToken.bind(this);\n\t    var boundOnFailure = this.onFailure.bind(this);\n\t    this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n\t  };\n\t\n\t  /**\n\t   * Make the http POST request.\n\t   * @param {JSON} header header JSON object\n\t   * @param {JSON} body body JSON object\n\t   * @param {string} url string\n\t   * @param {function} onSuccess callback\n\t   * @param {function} onFailure callback\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.makePOSTRequest = function makePOSTRequest(header, body, url, onSuccess, onFailure) {\n\t    // This is a sample server that supports CORS.\n\t    var xhr = this.createCORSRequest(this.getCognitoConstants().POST, url);\n\t    var bodyString = '';\n\t    var i = 0;\n\t    var j = 0;\n\t    var jsonData = xhr.responseText;\n\t    if (!xhr) {\n\t      return;\n\t    }\n\t    // set header\n\t    for (; j < header.length; j++) {\n\t      xhr.setRequestHeader(j, header[j]);\n\t    }\n\t    for (; i < body.length; i++) {\n\t      bodyString = bodyString.concat(i, this.getCognitoConstants().EQUALSIGN, body[i], this.getCognitoConstants().AMPERSAND);\n\t    }\n\t    bodyString = bodyString.substring(0, bodyString.length - 1);\n\t    xhr.send(bodyString);\n\t    xhr.onreadystatechange = function addressState() {\n\t      if (xhr.readyState === 4) {\n\t        if (xhr.status === 200) {\n\t          xhr.onload = onSuccess(jsonData);\n\t        } else {\n\t          xhr.onerror = onFailure(jsonData);\n\t        }\n\t      }\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Create the XHR object\n\t   * @param {string} method which method to call\n\t   * @param {string} url the url string\n\t   * @returns {object} xhr\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.createCORSRequest = function createCORSRequest(method, url) {\n\t    var xhr = new XMLHttpRequest();\n\t    xhr.open(method, url, true);\n\t    if (this.getCognitoConstants().WITHCREDENTIALS in xhr) {\n\t      // XHR for Chrome/Firefox/Opera/Safari.\n\t      xhr.open(method, url, true);\n\t    } else if ((typeof XDomainRequest === 'undefined' ? 'undefined' : _typeof(XDomainRequest)) !== this.getCognitoConstants().UNDEFINED) {\n\t      // XDomainRequest for IE.\n\t      xhr = new XDomainRequest();\n\t      xhr.open(method, url);\n\t    } else {\n\t      // CORS not supported.\n\t      xhr = null;\n\t    }\n\t    return xhr;\n\t  };\n\t\n\t  /**\n\t   * The http POST request onFailure callback.\n\t   * @param {object} err the error object\n\t   * @returns {function} onFailure\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.onFailure = function onFailure(err) {\n\t    this.userhandler.onFailure(err);\n\t  };\n\t\n\t  /**\n\t   * The http POST request onSuccess callback when refreshing tokens.\n\t   * @param {JSON} jsonData tokens\n\t   * @returns {function} onSuccess\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.onSuccessRefreshToken = function onSuccessRefreshToken(jsonData) {\n\t    var jsonDataObject = JSON.parse(jsonData);\n\t    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n\t      var URL = this.getFQDNSignIn();\n\t      this.launchUri(URL);\n\t    } else {\n\t      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n\t        this.signInUserSession.setIdToken(new _CognitoIdToken2.default(jsonDataObject.id_token));\n\t      }\n\t      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n\t        this.signInUserSession.setAccessToken(new _CognitoAccessToken2.default(jsonDataObject.access_token));\n\t      }\n\t      this.cacheTokensScopes();\n\t      return this.userhandler.onSuccess(this.signInUserSession);\n\t    }\n\t    return undefined;\n\t  };\n\t\n\t  /**\n\t   * The http POST request onSuccess callback when exchanging code for tokens.\n\t   * @param {JSON} jsonData tokens\n\t   * @returns {function} onSuccess\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.onSuccessExchangeForToken = function onSuccessExchangeForToken(jsonData) {\n\t    var jsonDataObject = JSON.parse(jsonData);\n\t    var refreshToken = new _CognitoRefreshToken2.default();\n\t    var accessToken = new _CognitoAccessToken2.default();\n\t    var idToken = new _CognitoIdToken2.default();\n\t    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n\t      return this.userhandler.onFailure(jsonData);\n\t    }\n\t    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n\t      this.signInUserSession.setIdToken(new _CognitoIdToken2.default(jsonDataObject.id_token));\n\t    } else {\n\t      this.signInUserSession.setIdToken(idToken);\n\t    }\n\t    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n\t      this.signInUserSession.setAccessToken(new _CognitoAccessToken2.default(jsonDataObject.access_token));\n\t    } else {\n\t      this.signInUserSession.setAccessToken(accessToken);\n\t    }\n\t    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().REFRESHTOKEN)) {\n\t      this.signInUserSession.setRefreshToken(new _CognitoRefreshToken2.default(jsonDataObject.refresh_token));\n\t    } else {\n\t      this.signInUserSession.setRefreshToken(refreshToken);\n\t    }\n\t    this.cacheTokensScopes();\n\t    return this.userhandler.onSuccess(this.signInUserSession);\n\t  };\n\t\n\t  /**\n\t   * Launch Cognito Auth UI page.\n\t   * @param {string} URL the url to launch\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.launchUri = function launchUri(URL) {\n\t    window.open(URL, this.getCognitoConstants().SELF);\n\t  };\n\t\n\t  /**\n\t   * @returns {string} scopes string\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getSpaceSeperatedScopeString = function getSpaceSeperatedScopeString() {\n\t    var tokenScopesString = this.signInUserSession.getTokenScopes().getScopes();\n\t    tokenScopesString = tokenScopesString.join(this.getCognitoConstants().SPACE);\n\t    return encodeURIComponent(tokenScopesString);\n\t  };\n\t\n\t  /**\n\t   * Create the FQDN(fully qualified domain name) for authorization endpoint.\n\t   * @returns {string} url\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getFQDNSignIn = function getFQDNSignIn() {\n\t    var state = this.generateRandomString(this.getCognitoConstants().STATELENGTH, this.getCognitoConstants().STATEORIGINSTRING);\n\t    var tokenScopesString = this.getSpaceSeperatedScopeString();\n\t    // Build the complete web domain to launch the login screen\n\t    var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNIN, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_REDIRECT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignIn), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().DOMAIN_QUERY_PARAM_RESPONSE_TYPE, this.getCognitoConstants().EQUALSIGN, this.responseType, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId(), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().STATE, this.getCognitoConstants().EQUALSIGN, state, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().SCOPE, this.getCognitoConstants().EQUALSIGN, tokenScopesString);\n\t    return uri;\n\t  };\n\t\n\t  /**\n\t   * Sign out the user.\n\t   * @returns {void}\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.signOut = function signOut() {\n\t    var URL = this.getFQDNSignOut();\n\t    this.signInUserSession = null;\n\t    this.clearCachedTokensScopes();\n\t    this.launchUri(URL);\n\t  };\n\t\n\t  /**\n\t   * Create the FQDN(fully qualified domain name) for signout endpoint.\n\t   * @returns {string} url\n\t   */\n\t\n\t\n\t  CognitoAuth.prototype.getFQDNSignOut = function getFQDNSignOut() {\n\t    var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNOUT, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_SIGNOUT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignOut), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId());\n\t    return uri;\n\t  };\n\t\n\t  return CognitoAuth;\n\t}();\n\t\n\texports.default = CognitoAuth;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\tvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\tvar weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\n\t/** @class */\n\t\n\tvar DateHelper = function () {\n\t  function DateHelper() {\n\t    _classCallCheck(this, DateHelper);\n\t  }\n\t\n\t  /**\n\t   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n\t   */\n\t  DateHelper.prototype.getNowString = function getNowString() {\n\t    var now = new Date();\n\t\n\t    var weekDay = weekNames[now.getUTCDay()];\n\t    var month = monthNames[now.getUTCMonth()];\n\t    var day = now.getUTCDate();\n\t\n\t    var hours = now.getUTCHours();\n\t    if (hours < 10) {\n\t      hours = '0' + hours;\n\t    }\n\t\n\t    var minutes = now.getUTCMinutes();\n\t    if (minutes < 10) {\n\t      minutes = '0' + minutes;\n\t    }\n\t\n\t    var seconds = now.getUTCSeconds();\n\t    if (seconds < 10) {\n\t      seconds = '0' + seconds;\n\t    }\n\t\n\t    var year = now.getUTCFullYear();\n\t\n\t    // ddd MMM D HH:mm:ss UTC YYYY\n\t    var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n\t\n\t    return dateNow;\n\t  };\n\t\n\t  return DateHelper;\n\t}();\n\t\n\texports.default = DateHelper;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _CognitoAccessToken = __webpack_require__(1);\n\t\n\tObject.defineProperty(exports, 'CognitoAccessToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAccessToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoIdToken = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'CognitoIdToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoIdToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'CognitoRefreshToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoRefreshToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoTokenScopes = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'CognitoTokenScopes', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoTokenScopes).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAuth = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'CognitoAuth', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAuth).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAuthSession = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'CognitoAuthSession', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAuthSession).default;\n\t  }\n\t});\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'DateHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DateHelper).default;\n\t  }\n\t});\n\t\n\tvar _StorageHelper = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'StorageHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_StorageHelper).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// amazon-cognito-auth.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ea1847fb83fe9decf52f","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\nimport * as enhancements from './src';\n\nexport * from './src';\n\nObject.keys(enhancements).forEach(key => {\n  CognitoIdentityServiceProvider[key] = enhancements[key];\n});\n\n// The version of crypto-browserify included by aws-sdk only\n// checks for window.crypto, not window.msCrypto as used by\n// IE 11 – so we set it explicitly here\nif (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n  window.crypto = window.msCrypto;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./enhance.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { util } from 'aws-sdk/global';\n\n/** @class */\nexport default class CognitoAccessToken {\n  /**\n   * Constructs a new CognitoAccessToken object\n   * @param {string=} AccessToken The JWT access token.\n   */\n  constructor(AccessToken) {\n    // Assign object\n    this.jwtToken = AccessToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * Sets new value for access token.\n   * @param {string=} accessToken The JWT access token.\n   * @returns {void}\n   */\n  setJwtToken(accessToken) {\n    this.jwtToken = accessToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(util.base64.decode(payload).toString('utf8'));\n    return expiration.exp;\n  }\n\n  /**\n   * @returns {string} the username from payload.\n   */\n  getUsername() {\n    if (this.jwtToken === null) {\n      return undefined;\n    }\n    const payload = this.jwtToken.split('.')[1];\n    const usernameSource = JSON.parse(util.base64.decode(payload).toString('utf8'));\n    return usernameSource.username;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAccessToken.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { util } from 'aws-sdk/global';\n\n/** @class */\nexport default class CognitoIdToken {\n  /**\n   * Constructs a new CognitoIdToken object\n   * @param {string=} IdToken The JWT Id token\n   */\n  constructor(IdToken) {\n    // Assign object\n    this.jwtToken = IdToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * Sets new value for id token.\n   * @param {string=} idToken The JWT Id token\n   * @returns {void}\n   */\n  setJwtToken(idToken) {\n    this.jwtToken = idToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(util.base64.decode(payload).toString('utf8'));\n    return expiration.exp;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoIdToken.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/** @class */\nexport default class CognitoRefreshToken {\n  /**\n   * Constructs a new CognitoRefreshToken object\n   * @param {string=} RefreshToken The JWT refresh token.\n   */\n  constructor(RefreshToken) {\n    // Assign object\n    this.refreshToken = RefreshToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getToken() {\n    return this.refreshToken;\n  }\n\n  /**\n   * Sets new value for refresh token.\n   * @param {string=} refreshToken The JWT refresh token.\n   * @returns {void}\n   */\n  setToken(refreshToken) {\n    this.refreshToken = refreshToken;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoRefreshToken.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/** @class */\nexport default class CognitoTokenScopes {\n  /**\n   * Constructs a new CognitoTokenScopes object\n   * @param {array=} TokenScopesArray The token scopes\n   */\n  constructor(TokenScopesArray) {\n    // Assign object\n    this.tokenScopes = TokenScopesArray || [];\n  }\n\n  /**\n   * @returns {Array} the token scopes.\n   */\n  getScopes() {\n    return this.tokenScopes;\n  }\n\n  /**\n   * Sets new value for token scopes.\n   * @param {array=} tokenScopes The token scopes\n   * @returns {void}\n   */\n  setTokenScopes(tokenScopes) {\n    this.tokenScopes = tokenScopes;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoTokenScopes.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport CognitoTokenScopes from './CognitoTokenScopes';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\n\n/** @class */\nexport default class CognitoAuthSession {\n\t/**\n\t * Constructs a new CognitoUserSession object\n\t * @param {CognitoIdToken} IdToken The session's Id token.\n\t * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n\t * @param {CognitoAccessToken} AccessToken The session's access token.\n\t * @param {array}  TokenScopes  The session's token scopes.\n\t */\n  constructor({ IdToken, RefreshToken, AccessToken, TokenScopes } = {}) {\n    if (IdToken) {\n      this.idToken = IdToken;\n    } else {\n      this.idToken = new CognitoIdToken();\n    }\n    if (RefreshToken) {\n      this.refreshToken = RefreshToken;\n    } else {\n      this.refreshToken = new CognitoRefreshToken();\n    }\n    if (AccessToken) {\n      this.accessToken = AccessToken;\n    } else {\n      this.accessToken = new CognitoAccessToken();\n    }\n    if (TokenScopes) {\n      this.tokenScopes = TokenScopes;\n    } else {\n      this.tokenScopes = new CognitoTokenScopes();\n    }\n  }\n\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n  getIdToken() {\n    return this.idToken;\n  }\n\n  /**\n   * Set a new Id token\n   * @param {CognitoIdToken} IdToken The session's Id token.\n   * @returns {void}\n   */\n  setIdToken(IdToken) {\n    this.idToken = IdToken;\n  }\n\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n  getRefreshToken() {\n    return this.refreshToken;\n  }\n\n  /**\n   * Set a new Refresh token\n   * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n   * @returns {void}\n   */\n  setRefreshToken(RefreshToken) {\n    this.refreshToken = RefreshToken;\n  }\n\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  /**\n   * Set a new Access token\n   * @param {CognitoAccessToken} AccessToken The session's access token.\n   * @returns {void}\n   */\n  setAccessToken(AccessToken) {\n    this.accessToken = AccessToken;\n  }\n\n  /**\n   * @returns {CognitoTokenScopes} the session's token scopes\n   */\n  getTokenScopes() {\n    return this.tokenScopes;\n  }\n\n  /**\n   * Set new token scopes\n   * @param {array}  tokenScopes  The session's token scopes.\n   * @returns {void}\n   */\n  setTokenScopes(tokenScopes) {\n    this.tokenScopes = tokenScopes;\n  }\n\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in Access and Id Tokens and the current time\n   * @returns {boolean} if the session is still valid\n   */\n  isValid() {\n    const now = Math.floor(new Date() / 1000);\n    try {\n      if (this.accessToken != null) {\n        return now < this.accessToken.getExpiration();\n      }\n      if (this.idToken != null) {\n        return now < this.idToken.getExpiration();\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAuthSession.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\nlet dataMemory = {};\n\n/** @class */\nclass MemoryStorage {\n\n  /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */\n  static setItem(key, value) {\n    dataMemory[key] = value;\n    return dataMemory[key];\n  }\n\n  /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */\n  static getItem(key) {\n    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n  }\n\n  /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {string} value - value that was deleted\n   */\n  static removeItem(key) {\n    return delete dataMemory[key];\n  }\n\n  /**\n   * This is used to clear the storage\n   * @returns {string} nothing\n   */\n  static clear() {\n    dataMemory = {};\n    return dataMemory;\n  }\n}\n\n/** @class */\nexport default class StorageHelper {\n\n  /**\n   * This is used to get a storage object\n   * @returns {object} the storage\n   */\n  constructor() {\n    try {\n      this.storageWindow = window.localStorage;\n      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n      this.storageWindow.removeItem('aws.cognito.test-ls');\n    } catch (exception) {\n      this.storageWindow = MemoryStorage;\n    }\n  }\n\n  /**\n   * This is used to return the storage\n   * @returns {object} the storage\n   */\n  getStorage() {\n    return this.storageWindow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StorageHelper.js","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"AWSCognito\"],\"commonjs2\":\"aws-sdk/global\",\"commonjs\":\"aws-sdk/global\",\"amd\":\"aws-sdk/global\"}\n// module id = 7\n// module chunks = 0","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport CognitoTokenScopes from './CognitoTokenScopes';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoAuthSession from './CognitoAuthSession';\nimport StorageHelper from './StorageHelper';\n\n/** @class */\nexport default class CognitoAuth {\n\t/**\n\t * Constructs a new CognitoAuth object\n\t * @param {object} data Creation options\n\t * @param {string} data.ClientId Required: User pool application client id.\n\t * @param {string} data.AppWebDomain Required: The application/user-pools Cognito web hostname,\n\t *                     this is set at the Cognito console.\n\t * @param {array} data.TokenScopesArray Optional: The token scopes\n\t * @param {string} data.RedirectUriSignIn Required: The redirect Uri,\n\t * which will be launched after authentication as signed in.\n\t * @param {string} data.RedirectUriSignOut Required:\n\t * The redirect Uri, which will be launched when signed out.\n\t * @param {nodeCallback<CognitoAuthSession>} Optional: userhandler Called on success or error.\n\t */\n  constructor(data) {\n    const { ClientId, AppWebDomain, TokenScopesArray,\n    RedirectUriSignIn, RedirectUriSignOut } = data || { };\n    if (data == null || !ClientId || !AppWebDomain || !RedirectUriSignIn || !RedirectUriSignOut) {\n      throw new Error(this.getCognitoConstants().PARAMETERERROR);\n    }\n\n    this.clientId = ClientId;\n    this.appWebDomain = AppWebDomain;\n    if (!Array.isArray(TokenScopesArray)) {\n      throw new Error(this.getCognitoConstants().SCOPETYPEERROR);\n    }\n    this.TokenScopesArray = TokenScopesArray || [];\n    const tokenScopes = new CognitoTokenScopes(this.TokenScopesArray);\n    this.RedirectUriSignIn = RedirectUriSignIn;\n    this.RedirectUriSignOut = RedirectUriSignOut;\n    this.signInUserSession = new CognitoAuthSession();\n    this.responseType = this.getCognitoConstants().TOKEN;\n    this.storage = new StorageHelper().getStorage();\n    this.signInUserSession.setTokenScopes(tokenScopes);\n    this.username = this.getLastUser();\n  }\n\n  /**\n   * @returns {JSON} the constants\n   */\n  getCognitoConstants() {\n    const CognitoConstants = {\n      DOMAIN_SCHEME: 'https',\n      DOMAIN_PATH_SIGNIN: 'authorize',\n      DOMAIN_PATH_SIGNOUT: 'logout',\n      DOMAIN_QUERY_PARAM_REDIRECT_URI: 'redirect_uri',\n      DOMAIN_QUERY_PARAM_SIGNOUT_URI: 'logout_uri',\n      DOMAIN_QUERY_PARAM_RESPONSE_TYPE: 'response_type',\n      CLIENT_ID: 'client_id',\n      STATE: 'state',\n      SCOPE: 'scope',\n      TOKEN: 'token',\n      CODE: 'code',\n      POST: 'POST',\n      PARAMETERERROR: 'The parameters: App client Id, App web domain' +\n                      'and the rediect URL when you are signed in are required.',\n      SCOPETYPEERROR: 'Scopes have to be array type. ',\n      QUESTIONMARK: '?',\n      POUNDSIGN: '#',\n      COLONDOUBLESLASH: '://',\n      SLASH: '/',\n      AMPERSAND: '&',\n      EQUALSIGN: '=',\n      SPACE: ' ',\n      CONTENTTYPE: 'Content-Type',\n      CONTENTTYPEVALUE: 'application/x-www-form-urlencoded',\n      AUTHORIZATIONCODE: 'authorization_code',\n      IDTOKEN: 'id_token',\n      ACCESSTOKEN: 'access_token',\n      REFRESHTOKEN: 'refresh_token',\n      ERROR: 'error',\n      STRINGTYPE: 'string',\n      STATELENGTH: 32,\n      STATEORIGINSTRING: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n      WITHCREDENTIALS: 'withCredentials',\n      UNDEFINED: 'undefined',\n      SELF: '_self',\n      HOSTNAMEREGEX: /:\\/\\/([0-9]?\\.)?(.[^/:]+)/i,\n      QUERYPARAMETERREGEX1: /#(.+)/,\n      QUERYPARAMETERREGEX2: /=(.+)/,\n      HEADER: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    };\n    return CognitoConstants;\n  }\n\n  /**\n   * @returns {string} the client id\n   */\n  getClientId() {\n    return this.clientId;\n  }\n\n  /**\n   * @returns {string} the app web domain\n   */\n  getAppWebDomain() {\n    return this.appWebDomain;\n  }\n\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoAuth} the user retrieved from storage\n   */\n  getCurrentUser() {\n    const lastUserKey = `CognitoIdentityServiceProvider.${this.clientId}.LastAuthUser`;\n\n    const lastAuthUser = this.storage.getItem(lastUserKey);\n    return lastAuthUser;\n  }\n\n  /**\n   * @param {string} Username the user's name\n   * method for setting the current user's name\n   * @returns {void}\n   */\n  setUser(Username) {\n    this.username = Username;\n  }\n\n  /**\n   * sets response type to 'code'\n   * @returns {void}\n   */\n  useCodeGrantFlow() {\n    this.responseType = this.getCognitoConstants().CODE;\n  }\n\n  /**\n   * sets response type to 'token'\n   * @returns {void}\n   */\n  useImplicitFlow() {\n    this.responseType = this.getCognitoConstants().TOKEN;\n  }\n\n  /**\n   * @returns {CognitoAuthSession} the current session for this user\n   */\n  getSignInUserSession() {\n    return this.signInUserSession;\n  }\n\n  /**\n   * @returns {string} the user's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @param {string} Username the user's username\n   * @returns {void}\n   */\n  setUsername(Username) {\n    this.username = Username;\n  }\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from the local storage, or by using a refresh token\n   * @param {string} RedirectUriSignIn Required: The redirect Uri,\n   * which will be launched after authentication.\n   * @param {array} TokenScopesArray Required: The token scopes, it is an\n   * array of strings specifying all scopes for the tokens.\n   * @returns {void}\n   */\n  getSession() {\n    const tokenScopesInputSet = new Set(this.TokenScopesArray);\n    const cachedScopesSet = new Set(this.signInUserSession.tokenScopes.getScopes());\n    const URL = this.getFQDNSignIn();\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return this.userhandler.onSuccess(this.signInUserSession);\n    }\n    this.signInUserSession = this.getCachedSession();\n    // compare scopes\n    if (!this.compareSets(tokenScopesInputSet, cachedScopesSet)) {\n      const tokenScopes = new CognitoTokenScopes(this.TokenScopesArray);\n      const idToken = new CognitoIdToken();\n      const accessToken = new CognitoAccessToken();\n      const refreshToken = new CognitoRefreshToken();\n      this.signInUserSession.setTokenScopes(tokenScopes);\n      this.signInUserSession.setIdToken(idToken);\n      this.signInUserSession.setAccessToken(accessToken);\n      this.signInUserSession.setRefreshToken(refreshToken);\n      this.launchUri(URL);\n    } else if (this.signInUserSession.isValid()) {\n      return this.userhandler.onSuccess(this.signInUserSession);\n    } else if (!this.signInUserSession.getRefreshToken()\n    || !this.signInUserSession.getRefreshToken().getToken()) {\n      this.launchUri(URL);\n    } else {\n      this.refreshSession(this.signInUserSession.getRefreshToken().getToken());\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {string} httpRequestResponse the http request response\n   * @returns {void}\n   * Parse the http request response and proceed according to different response types.\n   */\n  parseCognitoWebResponse(httpRequestResponse) {\n    if (httpRequestResponse.indexOf(this.getCognitoConstants().QUESTIONMARK) > -1) {\n      this.getCodeQueryParameter(httpRequestResponse);\n    } else if (httpRequestResponse.indexOf(this.getCognitoConstants().POUNDSIGN) > -1) {\n      // To parse the response to get tokens\n      this.getTokenQueryParameter(httpRequestResponse);\n    }\n  }\n\n  /**\n   * @param {string} httpRequestResponse the http request response\n   * @returns {void}\n   * Parse the http request response and proceed according to code response type.\n   */\n  getCodeQueryParameter(httpRequestResponse) {\n    let mapSecond = new Map();\n    mapSecond = this.getQueryParameters(httpRequestResponse, mapSecond);\n    if (mapSecond.has(this.getCognitoConstants().CODE)) {\n      // if the response contains code\n      // To parse the response and get the code value.\n      const codeParameter = this.getCodeParameter(httpRequestResponse);\n      const url = this.getCognitoConstants().DOMAIN_SCHEME.concat(\n      this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(),\n      this.getCognitoConstants().SLASH, this.getCognitoConstants().TOKEN);\n      const header = this.getCognitoConstants().HEADER;\n      const body = { grant_type: this.getCognitoConstants().AUTHORIZATIONCODE,\n        client_id: this.getClientId(),\n        redirect_uri: this.RedirectUriSignIn,\n        code: codeParameter };\n      const boundOnSuccess = (this.onSuccessExchangeForToken).bind(this);\n      const boundOnFailure = (this.onFailure).bind(this);\n      this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n    }\n  }\n\n  /**\n   * Parse the http request response and proceed according to token response type.\n   * @param {string} httpRequestResponse the http request response\n   * @returns {void}\n   */\n  getTokenQueryParameter(httpRequestResponse) {\n    let map = new Map();\n    map = this.getQueryParameters(httpRequestResponse, map);\n    const idToken = new CognitoIdToken();\n    const accessToken = new CognitoAccessToken();\n    const refreshToken = new CognitoRefreshToken();\n    if (httpRequestResponse.indexOf(this.getCognitoConstants().IDTOKEN) > -1) {\n      idToken.setJwtToken(map.get(this.getCognitoConstants().IDTOKEN));\n      this.signInUserSession.setIdToken(idToken);\n    } else {\n      this.signInUserSession.setIdToken(idToken);\n    }\n    if (httpRequestResponse.indexOf(this.getCognitoConstants().ACCESSTOKEN) > -1) {\n      accessToken.setJwtToken(map.get(this.getCognitoConstants().ACCESSTOKEN));\n      this.signInUserSession.setAccessToken(accessToken);\n    } else {\n      this.signInUserSession.setAccessToken(accessToken);\n    }\n    if (httpRequestResponse.indexOf(this.getCognitoConstants().REFRESHTOKEN) > -1) {\n      refreshToken.setToken(map.get(this.getCognitoConstants().REFRESHTOKEN));\n      this.signInUserSession.setRefreshToken(refreshToken);\n    } else {\n      this.signInUserSession.setRefreshToken(refreshToken);\n    }\n    this.cacheTokensScopes();\n    return this.userhandler.onSuccess(this.signInUserSession);\n  }\n\n  /**\n   * Get cached tokens and scopes and return a new session using all the cached data.\n   * @returns {CognitoAuthSession} the auth session\n   */\n  getCachedSession() {\n    if (!this.username) {\n      return new CognitoAuthSession();\n    }\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.getClientId()}.${this.username}`;\n    const idTokenKey = `${keyPrefix}.idToken`;\n    const accessTokenKey = `${keyPrefix}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.refreshToken`;\n    const scopeKey = `${keyPrefix}.tokenScopesString`;\n\n    const scopesString = this.storage.getItem(scopeKey);\n    let scopesArray = [];\n    if (scopesString) {\n      scopesArray = scopesString.split(' ');\n    }\n    const tokenScopes = new CognitoTokenScopes(scopesArray);\n    const idToken = new CognitoIdToken(this.storage.getItem(idTokenKey));\n    const accessToken = new CognitoAccessToken(this.storage.getItem(accessTokenKey));\n    const refreshToken = new CognitoRefreshToken(this.storage.getItem(refreshTokenKey));\n\n    const sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken,\n      TokenScopes: tokenScopes,\n    };\n    const cachedSession = new CognitoAuthSession(sessionData);\n    return cachedSession;\n  }\n\n  /**\n   * This is used to get last signed in user from local storage\n   * @returns {string} the last user name\n   */\n  getLastUser() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.getClientId()}`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n    const lastUserName = this.storage.getItem(lastUserKey);\n    if (lastUserName) {\n      return lastUserName;\n    }\n    return undefined;\n  }\n\n  /**\n   * This is used to save the session tokens, scope and state to local storage\n   * Input parameter is a set of strings.\n   * @returns {void}\n   */\n  cacheTokensScopes() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.getClientId()}`;\n    const tokenUserName = this.signInUserSession.getAccessToken().getUsername();\n    const idTokenKey = `${keyPrefix}.${tokenUserName}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${tokenUserName}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${tokenUserName}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n    const scopeKey = `${keyPrefix}.${tokenUserName}.tokenScopesString`;\n    const scopesArray = this.signInUserSession.getTokenScopes().getScopes();\n    const scopesString = scopesArray.join(' ');\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(lastUserKey, tokenUserName);\n    this.storage.setItem(scopeKey, scopesString);\n  }\n\n  /**\n   * Compare two sets if they are identical.\n   * @param {set} set1 one set\n   * @param {set} set2 the other set\n   * @returns {boolean} boolean value is true if two sets are identical\n   */\n  compareSets(set1, set2) {\n    if (set1.size !== set2.size) {\n      return false;\n    }\n    for (const item of set1) {\n      if (!set2.has(item)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @param {string} url the url string\n   * Get the hostname from url.\n   * @returns {string} hostname string\n   */\n  getHostName(url) {\n    const match = url.match(this.getCognitoConstants().HOSTNAMEREGEX);\n    if (match != null && match.length > 2 && typeof match[2] ===\n    this.getCognitoConstants().STRINGTYPE && match[2].length > 0) {\n      return match[2];\n    }\n    return undefined;\n  }\n\n  /**\n   * Get http query parameters and store them into a map.\n   * @param {string} url the url string\n   * @param {map} map the query parameter map\n   * @returns {map} map\n   */\n  getQueryParameters(url, map) {\n    const str = String(url).split(this.getCognitoConstants().QUERYPARAMETERREGEX1);\n    const url2 = str[1];\n    const str1 = String(url2).split(this.getCognitoConstants().AMPERSAND);\n    const num = str1.length;\n    let i;\n    for (i = 0; i < num; i++) {\n      str1[i] = String(str1[i]).split(this.getCognitoConstants().QUERYPARAMETERREGEX2);\n      map.set(str1[i][0], str1[i][1]);\n    }\n    return map;\n  }\n\n  /**\n   * Get the code parameter from the url.\n   * @param {string} url the url string\n   * @returns {string} code\n   */\n  getCodeParameter(url) {\n    const urlEdit = String(url).split(this.getCognitoConstants().QUESTIONMARK);\n    const url1 = urlEdit[1];\n    const urlStr = String(url1).split(this.getCognitoConstants().EQUALSIGN);\n    const code = urlStr[1];\n    return code;\n  }\n\n  /**\n   * helper function to generate a random string\n   * @param {int} length the length of string\n   * @param {string} chars a original string\n   * @returns {string} a random value.\n   */\n  generateRandomString(length, chars) {\n    let result = '';\n    let i = length;\n    for (; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];\n    return result;\n  }\n\n  /**\n   * This is used to clear the session tokens, scopes and state from local storage\n   * @returns {void}\n   */\n  clearCachedTokensScopes() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n    const scopeKey = `${keyPrefix}.${this.username}.tokenScopesString`;\n\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(scopeKey);\n  }\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} refreshToken authResult Successful auth response from server.\n   * @returns {void}\n   */\n  refreshSession(refreshToken) {\n    // https POST call for refreshing token\n    const url = this.getCognitoConstants().DOMAIN_SCHEME.concat(\n    this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(),\n    this.getCognitoConstants().SLASH, this.getCognitoConstants().TOKEN);\n    const header = this.getCognitoConstants().HEADER;\n    const body = { grant_type: this.getCognitoConstants().REFRESHTOKEN,\n      client_id: this.getClientId(),\n      redirect_uri: this.RedirectUriSignIn,\n      refresh_token: refreshToken };\n    const boundOnSuccess = (this.onSuccessRefreshToken).bind(this);\n    const boundOnFailure = (this.onFailure).bind(this);\n    this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n  }\n\n  /**\n   * Make the http POST request.\n   * @param {JSON} header header JSON object\n   * @param {JSON} body body JSON object\n   * @param {string} url string\n   * @param {function} onSuccess callback\n   * @param {function} onFailure callback\n   * @returns {void}\n   */\n  makePOSTRequest(header, body, url, onSuccess, onFailure) {\n    // This is a sample server that supports CORS.\n    const xhr = this.createCORSRequest(this.getCognitoConstants().POST, url);\n    let bodyString = '';\n    let i = 0;\n    let j = 0;\n    const jsonData = xhr.responseText;\n    if (!xhr) {\n      return;\n    }\n    // set header\n    for (; j < header.length; j++) {\n      xhr.setRequestHeader(j, header[j]);\n    }\n    for (; i < body.length; i++) {\n      bodyString = bodyString.concat(i, this.getCognitoConstants().EQUALSIGN,\n      body[i], this.getCognitoConstants().AMPERSAND);\n    }\n    bodyString = bodyString.substring(0, bodyString.length - 1);\n    xhr.send(bodyString);\n    xhr.onreadystatechange = function addressState() {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          xhr.onload = onSuccess(jsonData);\n        } else {\n          xhr.onerror = onFailure(jsonData);\n        }\n      }\n    };\n  }\n\n  /**\n   * Create the XHR object\n   * @param {string} method which method to call\n   * @param {string} url the url string\n   * @returns {object} xhr\n   */\n  createCORSRequest(method, url) {\n    let xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    if (this.getCognitoConstants().WITHCREDENTIALS in xhr) {\n      // XHR for Chrome/Firefox/Opera/Safari.\n      xhr.open(method, url, true);\n    } else if (typeof XDomainRequest !== this.getCognitoConstants().UNDEFINED) {\n      // XDomainRequest for IE.\n      xhr = new XDomainRequest();\n      xhr.open(method, url);\n    } else {\n      // CORS not supported.\n      xhr = null;\n    }\n    return xhr;\n  }\n\n  /**\n   * The http POST request onFailure callback.\n   * @param {object} err the error object\n   * @returns {function} onFailure\n   */\n  onFailure(err) {\n    this.userhandler.onFailure(err);\n  }\n\n  /**\n   * The http POST request onSuccess callback when refreshing tokens.\n   * @param {JSON} jsonData tokens\n   * @returns {function} onSuccess\n   */\n  onSuccessRefreshToken(jsonData) {\n    const jsonDataObject = JSON.parse(jsonData);\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n    this.getCognitoConstants().ERROR)) {\n      const URL = this.getFQDNSignIn();\n      this.launchUri(URL);\n    } else {\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n      this.getCognitoConstants().IDTOKEN)) {\n        this.signInUserSession.setIdToken(new\n        CognitoIdToken(jsonDataObject.id_token));\n      }\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n      this.getCognitoConstants().ACCESSTOKEN)) {\n        this.signInUserSession.setAccessToken(new\n        CognitoAccessToken(jsonDataObject.access_token));\n      }\n      this.cacheTokensScopes();\n      return this.userhandler.onSuccess(this.signInUserSession);\n    }\n    return undefined;\n  }\n\n  /**\n   * The http POST request onSuccess callback when exchanging code for tokens.\n   * @param {JSON} jsonData tokens\n   * @returns {function} onSuccess\n   */\n  onSuccessExchangeForToken(jsonData) {\n    const jsonDataObject = JSON.parse(jsonData);\n    const refreshToken = new CognitoRefreshToken();\n    const accessToken = new CognitoAccessToken();\n    const idToken = new CognitoIdToken();\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n    this.getCognitoConstants().ERROR)) {\n      return this.userhandler.onFailure(jsonData);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n    this.getCognitoConstants().IDTOKEN)) {\n      this.signInUserSession.setIdToken(\n      new CognitoIdToken(jsonDataObject.id_token));\n    } else {\n      this.signInUserSession.setIdToken(idToken);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n    this.getCognitoConstants().ACCESSTOKEN)) {\n      this.signInUserSession.setAccessToken(new\n      CognitoAccessToken(jsonDataObject.access_token));\n    } else {\n      this.signInUserSession.setAccessToken(accessToken);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n    this.getCognitoConstants().REFRESHTOKEN)) {\n      this.signInUserSession.setRefreshToken(new\n      CognitoRefreshToken(jsonDataObject.refresh_token));\n    } else {\n      this.signInUserSession.setRefreshToken(refreshToken);\n    }\n    this.cacheTokensScopes();\n    return this.userhandler.onSuccess(this.signInUserSession);\n  }\n\n  /**\n   * Launch Cognito Auth UI page.\n   * @param {string} URL the url to launch\n   * @returns {void}\n   */\n  launchUri(URL) {\n    window.open(URL, this.getCognitoConstants().SELF);\n  }\n\n  /**\n   * @returns {string} scopes string\n   */\n  getSpaceSeperatedScopeString() {\n    let tokenScopesString = this.signInUserSession.getTokenScopes().getScopes();\n    tokenScopesString = tokenScopesString.join(this.getCognitoConstants().SPACE);\n    return encodeURIComponent(tokenScopesString);\n  }\n\n  /**\n   * Create the FQDN(fully qualified domain name) for authorization endpoint.\n   * @returns {string} url\n   */\n  getFQDNSignIn() {\n    const state = this.generateRandomString(this.getCognitoConstants().STATELENGTH,\n    this.getCognitoConstants().STATEORIGINSTRING);\n    const tokenScopesString = this.getSpaceSeperatedScopeString();\n    // Build the complete web domain to launch the login screen\n    const uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(\n    this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(),\n    this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNIN,\n    this.getCognitoConstants().QUESTIONMARK,\n    this.getCognitoConstants().DOMAIN_QUERY_PARAM_REDIRECT_URI,\n    this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignIn),\n    this.getCognitoConstants().AMPERSAND,\n    this.getCognitoConstants().DOMAIN_QUERY_PARAM_RESPONSE_TYPE,\n    this.getCognitoConstants().EQUALSIGN,\n    this.responseType, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID,\n    this.getCognitoConstants().EQUALSIGN, this.getClientId(),\n    this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().STATE,\n    this.getCognitoConstants().EQUALSIGN, state, this.getCognitoConstants().AMPERSAND,\n    this.getCognitoConstants().SCOPE, this.getCognitoConstants().EQUALSIGN, tokenScopesString);\n    return uri;\n  }\n\n  /**\n   * Sign out the user.\n   * @returns {void}\n   */\n  signOut() {\n    const URL = this.getFQDNSignOut();\n    this.signInUserSession = null;\n    this.clearCachedTokensScopes();\n    this.launchUri(URL);\n  }\n\n  /**\n   * Create the FQDN(fully qualified domain name) for signout endpoint.\n   * @returns {string} url\n   */\n  getFQDNSignOut() {\n    const uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(\n    this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(),\n    this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNOUT,\n    this.getCognitoConstants().QUESTIONMARK,\n    this.getCognitoConstants().DOMAIN_QUERY_PARAM_SIGNOUT_URI,\n    this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignOut),\n    this.getCognitoConstants().AMPERSAND,\n    this.getCognitoConstants().CLIENT_ID,\n    this.getCognitoConstants().EQUALSIGN, this.getClientId());\n    return uri;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAuth.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\nconst monthNames =\n  ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n/** @class */\nexport default class DateHelper {\n  /**\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n   */\n  getNowString() {\n    const now = new Date();\n\n    const weekDay = weekNames[now.getUTCDay()];\n    const month = monthNames[now.getUTCMonth()];\n    const day = now.getUTCDate();\n\n    let hours = now.getUTCHours();\n    if (hours < 10) {\n      hours = `0${hours}`;\n    }\n\n    let minutes = now.getUTCMinutes();\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    let seconds = now.getUTCSeconds();\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    const year = now.getUTCFullYear();\n\n    // ddd MMM D HH:mm:ss UTC YYYY\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\n\n    return dateNow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/DateHelper.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nexport { default as CognitoAccessToken } from './CognitoAccessToken';\nexport { default as CognitoIdToken } from './CognitoIdToken';\nexport { default as CognitoRefreshToken } from './CognitoRefreshToken';\nexport { default as CognitoTokenScopes } from './CognitoTokenScopes';\nexport { default as CognitoAuth } from './CognitoAuth';\nexport { default as CognitoAuthSession } from './CognitoAuthSession';\nexport { default as DateHelper } from './DateHelper';\nexport { default as StorageHelper } from './StorageHelper';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}